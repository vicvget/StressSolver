#ifndef NODE_LINKS_H

#define NODE_LINKS_H


#include <vector>


using std::vector;


// отсутствие связи
#define NO_LINK -1


/**
* Объединение, хранящее ссылки на связанные с данным узлом узлы сетки
* вдоль или против некоторого направления.
* Ссылка -1 означает, что по данному направлению связи нет
*/
union LinkDirection
{

	// Перечисления

	// перечисление возможных вариантов связи в определенном направлении
	enum DirectionVariantEnumeration
	{
		MinusVariant, // против направления
		PlusVariant, // вдоль направления
		VariantsCount // количество вариантов
	};


	// Функции создания объекта класса

	/**
	* Создать объект по умолчанию
	* @return объект по умолчанию
	*/
	static
	LinkDirection Create();

	/**
	* Создать объект с заданными значениями полей
	* @param plusLink - ссылка на соседний узел по направлению
	* @param minusLink - ссылка на соседний узел против направления
	* @return созданный объект с заданными значениями полей
	*/
	static
	LinkDirection Create
		(
			int plusLink,
			int minusLink
		);

	/**
	* Создать объект с заданными значениями полей
	* @param links - массив ссылок на соседние узлы вдоль данного направления
	* @return созданный объект с заданными значениями полей
	*/
	static
	LinkDirection Create
		(
			const int links[]
		);


	// Селекторы

	/**
	* Получить ссылку на соседний узел по направлению
	* @return ссылка на соседний узел по направлению
	*/
	int Plus() const;

	/**
	* Получить доступ к ссылке на соседний узел по направлению
	* @return ссылка на соседний узел по направлению
	*/
	int& Plus();

	/**
	* Получить ссылку на соседний узел против направления
	* @return ссылка на соседний узел против направления
	*/
	int Minus() const;

	/**
	* Получить доступ к ссылке на соседний узел против направления
	* @return ссылка на соседний узел против направления
	*/
	int& Minus();

	/**
	* Получить ссылку на соседний узел по данному варианту связи вдоль направления
	* @param direction - вариант связи вдоль направления
	* @return ссылка на соседний узел по данному варианту связи вдоль направления
	*/
	int Link
		(
			DirectionVariantEnumeration variant
		)	const;

	/**
	* Получить доступ к ссылке на соседний узел по данному варианту связи вдоль направления
	* @param direction - вариант связи вдоль направления
	* @return ссылка на соседний узел по данному варианту связи вдоль направления
	*/
	int& Link
		(
			DirectionVariantEnumeration variant
		);

	/**
	* Оператор получения ссылки на соседний узел по данному варианту связи вдоль направления
	* @param direction - вариант связи вдоль направления
	* @return ссылка на соседний узел по данному варианту связи вдоль направления
	*/
	int operator[]
		(
			DirectionVariantEnumeration variant
		)	const;

	/**
	* Оператор получения доступа к ссылке на соседний узел по данному варианту связи вдоль направления
	* @param direction - вариант связи вдоль направления
	* @return ссылка на соседний узел по данному варианту связи вдоль направления
	*/
	int& operator[]
		(
			DirectionVariantEnumeration variant
		);


protected:

	// ссылки на соседние узлы вдоль данного направления в именованном виде
	struct
	{

		// ссылка на соседний узел против направления
		int _minusLink;

		// ссылка на соседний узел по направлению
		int _plusLink;

	};

	// массив ссылок на соседние узлы вдоль данного направления
	int _links[VariantsCount];

};

// тип варианта связи в определенном направлении
typedef LinkDirection::DirectionVariantEnumeration DirectionVariant;


/**
* Структура, хранящая ссылки на связанные с данным узлом узлы сетки.
* Ссылка -1 означает, что по данному направлению связи нет
*/
struct NodeLinks
{
	
	// Перечисления

	// перечисление возможных видов направлений
	enum DirectionEnumeration
	{
		XDirection, // направление вдоль оси Ox
		YDirection, // направление вдоль оси Oy
		ZDirection, // направление вдоль оси Oz
		DirectionsCount // количество направлений
	};


	// Конструкторы и деструктор

	/**
	* Конструктор по умолчанию
	*/
	NodeLinks();

	/**
	* Конструктор
	* @param xDirection - ссылки на соседние узлы вдоль оси Ox
	* @param yDirection - ссылки на соседние узлы вдоль оси Oy
	* @param zDirection - ссылки на соседние узлы вдоль оси Oz
	*/
	NodeLinks
		(
			const LinkDirection& xDirection,
			const LinkDirection& yDirection,
			const LinkDirection& zDirection
		);

	/**
	* Конструктор
	* @param directions - массив ссылок на соседние узлы по направлениям
	*/
	NodeLinks
		(
			const LinkDirection directions[]
		);

	/**
	* Конструктор
	* @param links - список ссылок на связанные узлы в виде массива
	*/
	NodeLinks
		(
			const int links[]
		);


	// Селекторы

	/**
	* Получить ссылки на соседние узлы по направлению вдоль оси Ox
	* @return набор ссылок на соседние узлы по направлению вдоль оси Ox
	*/
	const LinkDirection& X() const;

	/**
	* Получить доступ к ссылкам на соседние узлы по направлению вдоль оси Ox
	* @return набор ссылок на соседние узлы по направлению вдоль оси Ox
	*/
	LinkDirection& X();

	/**
	* Получить ссылки на соседние узлы по направлению вдоль оси Oy
	* @return набор ссылок на соседние узлы по направлению вдоль оси Oy
	*/
	const LinkDirection& Y() const;

	/**
	* Получить доступ к ссылкам на соседние узлы по направлению вдоль оси Oy
	* @return набор ссылок на соседние узлы по направлению вдоль оси Oy
	*/
	LinkDirection& Y();

	/**
	* Получить ссылки на соседние узлы по направлению вдоль оси Oz
	* @return набор ссылок на соседние узлы по направлению вдоль оси Oz
	*/
	const LinkDirection& Z() const;

	/**
	* Получить доступ к ссылкам на соседние узлы по направлению вдоль оси Oz
	* @return набор ссылок на соседние узлы по направлению вдоль оси Oz
	*/
	LinkDirection& Z();

	/**
	* Получить ссылки на соседние узлы по данному направлению
	* @param direction - направление для связи с соседними узлами
	* @return набор ссылок на соседние узлы по данному направлению
	*/
	const LinkDirection& Direction
		(
			DirectionEnumeration direction
		)	const;

	/**
	* Получить доступ к ссылкам на соседние узлы по данному направлению
	* @param direction - направление для связи с соседними узлами
	* @return набор ссылок на соседние узлы по данному направлению
	*/
	LinkDirection& Direction
		(
			DirectionEnumeration direction
		);

	/**
	* Оператор получения ссылки на соседние узлы по данному направлению
	* @param direction - направление для связи с соседними узлами
	* @return набор ссылок на соседние узлы по данному направлению
	*/
	const LinkDirection& operator[]
		(
			DirectionEnumeration direction
		)	const;

	/**
	* Оператор доступа к ссылкам на соседние узлы по данному направлению
	* @param direction - направление для связи с соседними узлами
	* @return набор ссылок на соседние узлы по данному направлению
	*/
	LinkDirection& operator[]
		(
			DirectionEnumeration direction
		);

	/**
	* Получить ссылку на соседний узел по индексу связи
	* @param linkIndex - индекс связи
	* @return ссылка на соседний узел по данному индексу связи
	*/
	int Link
		(
			int linkIndex
		)	const;

	/**
	* Получить доступ к ссылке на соседний узел по индексу связи
	* @param linkIndex - индекс связи
	* @return ссылка на соседний узел по данному индексу связи
	*/
	int& Link
		(
			int linkIndex
		);

	/**
	* Оператор получения ссылки на соседний узел по индексу связи
	* @param linkIndex - индекс связи
	* @return ссылка на соседний узел по данному индексу связи
	*/
	int operator[]
		(
			int linkIndex
		)	const;

	/**
	* Оператор получения доступа к ссылке на соседний узел по индексу связи
	* @param linkIndex - индекс связи
	* @return ссылка на соседний узел по данному индексу связи
	*/
	int& operator[]
		(
			int linkIndex
		);

	/**
	* Получить общее максимально возможное количество связанных с данным узлом узлов сетки
	* @return общее максимально возможное количество связанных с данным узлом узлов сетки
	*/
	static
	int LinksCount();


protected:

	// общее максимально возможное количество связанных с данным узлом узлов сетки
	static
	const int _linksCount = DirectionsCount * LinkDirection::VariantsCount;

	// ссылки на соседние узлы по направлениям
	union
	{

		// ссылки на соседние узлы по направлениям в именованном виде
		struct
		{

			// ссылки на соседние узлы вдоль оси Ox
			LinkDirection _xDirection;

			// ссылки на соседние узлы вдоль оси Oy
			LinkDirection _yDirection;

			// ссылки на соседние узлы вдоль оси Oz
			LinkDirection _zDirection;

		};

		// массив ссылок на соседние узлы по направлениям
		LinkDirection _directions[DirectionsCount];

		// список ссылок на связанные узлы в виде массива
		int _links[_linksCount];

	};

};

// тип направления связи
typedef NodeLinks::DirectionEnumeration Direction;

// список ссылок на соседние узлы для всех узлов сетки
typedef vector<NodeLinks> Links;


#endif
