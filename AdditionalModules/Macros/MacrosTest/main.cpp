#include "../ArgumentsListMacros.h"

#include <iostream>


#define PRINT_LINE() \
	std::cout << std::endl

#define PRINT_SINGLE(x) \
	std::cout << x << std::endl

#define PRINT_MACRO(x) \
	std::cout << #x << ":" << std::endl << "\t" << STRINGIZE(x) << std::endl


int main()
{
	// TODO: добавить тесты на макросы для обработки циклов, условий, списков и т.д.
	PRINT_SINGLE("GET_ARGUMENTS_COUNT:");
	PRINT_MACRO(GET_ARGUMENTS_COUNT());
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2, 3));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2, 3, 4));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2, 3, 4, 5));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2, 3, 4, 5, 6));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2, 3, 4, 5, 6, 7));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2, 3, 4, 5, 6, 7, 8));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2, 3, 4, 5, 6, 7, 8, 9));
	PRINT_MACRO(GET_ARGUMENTS_COUNT(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
	PRINT_LINE();
	PRINT_SINGLE("CREATE_PARAMETERS_LIST:");
	PRINT_MACRO((CREATE_PARAMETERS_LIST()));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char, short)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char, short, int)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char, short, int, signed)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char, short, int, signed, unsigned)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char, short, int, signed, unsigned, long)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char, short, int, signed, unsigned, long, float)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char, short, int, signed, unsigned, long, float, double)));
	PRINT_MACRO((CREATE_PARAMETERS_LIST(bool, char, short, int, signed, unsigned, long, float, double, string)));
	PRINT_LINE();
	PRINT_SINGLE("CREATE_ARGUMENTS_LIST:");
	PRINT_MACRO((CREATE_ARGUMENTS_LIST()));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2, 3)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2, 3, 4)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2, 3, 4, 5)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2, 3, 4, 5, 6)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2, 3, 4, 5, 6, 7)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2, 3, 4, 5, 6, 7, 8)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2, 3, 4, 5, 6, 7, 8, 9)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)));
	PRINT_LINE();
	PRINT_SINGLE("CREATE_ARGUMENTS_LIST_FOR_NUMBER:");
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(0)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(1)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(2)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(3)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(4)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(5)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(6)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(7)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(8)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(9)));
	PRINT_MACRO((CREATE_ARGUMENTS_LIST_FOR_NUMBER(10)));
}